#!/usr/bin/env bash
set -exo pipefail

# Constants
RUN_COMMAND=run_tor
TOR_VER=0.3.5.9
TOR_SRC_NAME=tor-${TOR_VER}.tar.gz
TOR_DIST_URL=https://www.torproject.org/dist/

# Variables
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
TOR_SIG_NAME=${TOR_SRC_NAME}.asc
TOR_SRC_URL=${TOR_DIST_URL}${TOR_SRC_NAME}
TOR_SRC_SIG_URL=${TOR_DIST_URL}${TOR_SIG_NAME}

################################################################################
# TRY USE CACHE
################################################################################

echo "[TOR]  Checking if Tor is in cache"
mkdir -p "${CACHE_DIR}"
if [ ! -f "${CACHE_DIR}/tor_version.txt" ]; then
    echo "[TOR]  First run: Tor is not cached"
    TOR_IS_CACHED=0
else
    grep -wq "${TOR_SRC_NAME}" "${CACHE_DIR}/tor_version.txt"
    if [ $? -eq 0 ] ; then
        echo "[TOR]  Tor is cached"
        TOR_IS_CACHED=1
    else
        echo "[TOR]  Tor is not cached"
        TOR_IS_CACHED=0
    fi
fi

################################################################################
# GET SOURCES
################################################################################

if [ $TOR_IS_CACHED -eq 0 ] ; then
    echo "[TOR]  Downloading ${TOR_SRC_URL}"
    wget -q $TOR_SRC_URL

    if [ $? - ne 0]; then
        echo "[TOR]  FAILED to obtain ${TOR_SRC_URL}"
        exit 1
    fi

    echo "[TOR]  Downloading ${TOR_SRC_SIG_URL}"
    wget -q $TOR_SRC_SIG_URL

    if [ $? -ne 0 ]; then
        echo "[TOR]  FAILED to obtain signature ${TOR_SRC_SIG_URL}"
        exit 1
    fi
fi

################################################################################
# VERIFY INTEGRITY
################################################################################

if [ $TOR_IS_CACHED -eq 0 ] ; then
    echo "[TOR]  Verifying signature of Tor package"
    # gpg --keyserver pool.sks-keyservers.net --recv-keys 0x4E2C6E8793298290
    # gpg --keyserver pool.sks-keyservers.net --recv-keys 0x6AFEE6D49E92B601
    gpg --keyserver keys.gnupg.net --recv 886DDD89
    gpg --verify ${TOR_SIG_NAME} ${TOR_SRC_NAME} | grep -c "Good signature"
    if [ $? -lt 1 ]; then
        echo "[TOR]  FAILED to verify the signature"
        exit 1
    fi
fi

################################################################################
# COMPILE
################################################################################

if [ $TOR_IS_CACHED -eq 0 ] ; then
    echo "[TOR]  Compiling Tor package"
    tar -zxf ${TOR_SRC_NAME}
    cd tor-${TOR_VER}
    ./configure --prefix=$CACHE_DIR/tor
    if [ $? -ne 0 ]; then
        echo "[TOR]  FAILED to configure for compliation"
        exit 1
    fi

    make install
    if [ $? -ne 0 ]; then
        echo "[TOR]  FAILED to run make install"
        exit  1
    fi
fi

################################################################################
# INSTALL
################################################################################

# Cached installation to real build dir
cp -r $CACHE_DIR/tor ${BUILD_DIR}

# Saves the version just compiled
echo "${TOR_SRC_NAME}" > "${CACHE_DIR}/tor_version.txt"

# Copy the default torrc.erb template file to the tor directory
cp ./lib/torrc.erb "${BUILD_DIR}/tor/torrc.erb"

# Copy the run_tor executable to the tor directory
cp ./bin/run_tor "${BUILD_DIR}/tor/bin/${RUN_COMMAND}"

echo "[TOR]  Installed successfully"
